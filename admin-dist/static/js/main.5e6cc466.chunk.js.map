{"version":3,"sources":["sites.js","users.js","portfolios.js","addUploadFeature.js","Dashboard.js","authProvider.js","settings.js","App.js","serviceWorker.js","index.js"],"names":["NonePagination","_ref","page","perPage","total","setPage","SiteList","props","react_default","a","createElement","List","Object","assign","exporter","pagination","Datagrid","rowClick","TextField","source","sortable","SiteEdit","Edit","SimpleForm","DisabledInput","TextInput","fullWidth","LongTextInput","type","label","parse","v","split","UserList","users_NonePagination","EmailField","UserEdit","UserCreate","Create","PortfolioList","portfolios_NonePagination","PortfolioEdit","ImageInput","accept","maxSize","multiple","placeholder","ImageField","title","PortfolioCreate","convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","rawFile","onload","result","onerror","addUploadFeature","requestHandler","resource","params","data","pictures","length","formerPictures","filter","p","File","newPictures","all","map","then","base64Pictures","picture64","index","src","concat","transformedNewPictures","_objectSpread","toConsumableArray","Dashboard","Card_default","CardHeader_default","CardContent_default","authProvider","AUTH_LOGIN","username","password","request","Request","method","body","JSON","stringify","headers","Headers","Content-Type","localStorage","removeItem","fetch","response","status","Error","statusText","json","json_data","is_logged_in","setItem","logged_token","AUTH_LOGOUT","AUTH_ERROR","AUTH_CHECK","uploadCapableDataProvider","simpleRestProvider","url","options","arguments","undefined","Accept","getItem","set","fetchUtils","fetchJson","App","Admin","dashboard","dataProvider","Resource","name","list","edit","icon","SiteIcon","create","UserIcon","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e6cc466.chunk.js","sourcesContent":["import React from 'react';\r\nimport { List, Datagrid, TextField, Edit, Create, SimpleForm, DisabledInput, TextInput, LongTextInput } from 'react-admin';\r\n\r\nconst NonePagination = ({ page, perPage, total, setPage }) => {\r\n    return ('');\r\n};\r\n\r\nexport const SiteList = props => (\r\n    <List {...props} exporter={false} pagination={<NonePagination />}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" sortable={false} />\r\n            <TextField source=\"name\" sortable={false} />\r\n            <TextField source=\"site_title\" sortable={false} />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const SiteEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <DisabledInput source=\"id\" />\r\n            <TextInput source=\"name\" fullWidth />\r\n            <TextInput source=\"site_title\" fullWidth />\r\n            <LongTextInput source=\"site_description\" fullWidth />\r\n            <TextInput source=\"site_copyright\" fullWidth />\r\n            <TextInput source=\"page_title\" fullWidth />\r\n            <LongTextInput source=\"page_content\" fullWidth />\r\n            <TextInput source=\"owner_name\" fullWidth />\r\n            <TextInput source=\"owner_email\" type=\"email\" fullWidth />\r\n            <LongTextInput source=\"owner_address\" fullWidth />\r\n            <TextInput source=\"owner_map_url\" fullWidth />\r\n            <TextInput source=\"owner_phones\" label=\"Owner phones (comma separated)\" parse={v => v.split(',')} fullWidth />\r\n            <TextInput source=\"owner_whatsapp_phones\" label=\"Owner whatsapp phones (comma separated)\" parse={v => v.split(',')} fullWidth />\r\n            <TextInput source=\"owner_facebook_url\" fullWidth />\r\n            <TextInput source=\"owner_twitter_url\" fullWidth />\r\n            <TextInput source=\"owner_instagram_url\" fullWidth />\r\n            <TextInput source=\"template_dir\" fullWidth />\r\n            <TextInput source=\"template_file\" fullWidth />\r\n            <TextInput source=\"template_assets\" label=\"Template assets (comma separated)\" parse={v => v.split(',')} fullWidth />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const SiteCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"name\" fullWidth />\r\n            <TextInput source=\"site_title\" fullWidth />\r\n            <LongTextInput source=\"site_description\" fullWidth />\r\n            <TextInput source=\"site_copyright\" fullWidth />\r\n            <TextInput source=\"page_title\" fullWidth />\r\n            <LongTextInput source=\"page_content\" fullWidth />\r\n            <TextInput source=\"owner_name\" fullWidth />\r\n            <TextInput source=\"owner_email\" type=\"email\" fullWidth />\r\n            <LongTextInput source=\"owner_address\" fullWidth />\r\n            <TextInput source=\"owner_map_url\" fullWidth />\r\n            <TextInput source=\"owner_phones\" label=\"Owner phones (comma separated)\" parse={v => v.split(',')} fullWidth />\r\n            <TextInput source=\"owner_whatsapp_phones\" label=\"Owner whatsapp phones (comma separated)\" parse={v => v.split(',')} fullWidth />\r\n            <TextInput source=\"owner_facebook_url\" fullWidth />\r\n            <TextInput source=\"owner_twitter_url\" fullWidth />\r\n            <TextInput source=\"owner_instagram_url\" fullWidth />\r\n            <TextInput source=\"template_dir\" fullWidth />\r\n            <TextInput source=\"template_file\" fullWidth />\r\n            <TextInput source=\"template_assets\" label=\"Template assets (comma separated)\" parse={v => v.split(',')} fullWidth />\r\n        </SimpleForm>\r\n    </Create>\r\n);","import React from 'react';\r\nimport { List, Datagrid, TextField, EmailField, Edit, Create, SimpleForm, DisabledInput, TextInput } from 'react-admin';\r\n\r\nconst NonePagination = ({ page, perPage, total, setPage }) => {\r\n    return ('');\r\n};\r\n\r\nexport const UserList = props => (\r\n    <List {...props} exporter={false} pagination={<NonePagination />}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" sortable={false} />\r\n            <TextField source=\"username\" sortable={false} />\r\n            <TextField source=\"name\" sortable={false} />\r\n            <EmailField source=\"email\" sortable={false} />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const UserEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <DisabledInput source=\"id\" />\r\n            <TextInput source=\"username\" />\r\n            <TextInput source=\"password\" type=\"password\" />\r\n            <TextInput source=\"name\" />\r\n            <TextInput source=\"email\" type=\"email\" />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const UserCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"username\" />\r\n            <TextInput source=\"password\" type=\"password\" />\r\n            <TextInput source=\"name\" />\r\n            <TextInput source=\"email\" type=\"email\" />\r\n        </SimpleForm>\r\n    </Create>\r\n);","import React from 'react';\r\nimport { List, Datagrid, TextField, Edit, Create, SimpleForm, DisabledInput, TextInput, ImageInput, ImageField } from 'react-admin';\r\n\r\nconst NonePagination = ({ page, perPage, total, setPage }) => {\r\n    return ('');\r\n};\r\n\r\nexport const PortfolioList = props => (\r\n    <List {...props} exporter={false} pagination={<NonePagination />}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" sortable={false} />\r\n            <TextField source=\"category\" sortable={false} />\r\n            <TextField source=\"project_name\" sortable={false} />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const PortfolioEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <DisabledInput source=\"id\" />\r\n            <TextInput source=\"category\" fullWidth />\r\n            <TextInput source=\"project_name\" fullWidth />\r\n            <ImageInput source=\"pictures\" label=\"Portfolio picture\" accept=\"image/*\" maxSize={5242880} multiple={true} placeholder={<p>Drop some pictures to upload, or click to select one.<br/>JPEG and PNG are accepted.<br/>5Mb maximun file size.<br/>(650 x 350) minimun file width and height.</p>}>\r\n                <ImageField source=\"thumbnail_url\" title=\"title\" />\r\n            </ImageInput>\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const PortfolioCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"category\" fullWidth />\r\n            <TextInput source=\"project_name\" fullWidth />\r\n        </SimpleForm>\r\n    </Create>\r\n);","// in addUploadFeature.js\r\n/**\r\n * Convert a `File` object returned by the upload input into a base 64 string.\r\n * That's not the most optimized way to store images in production, but it's\r\n * enough to illustrate the idea of data provider decoration.\r\n */\r\nconst convertFileToBase64 = file => new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file.rawFile);\r\n\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = reject;\r\n});\r\n\r\n/**\r\n * For posts update only, convert uploaded image in base 64 and attach it to\r\n * the `picture` sent property, with `src` and `title` attributes.\r\n */\r\nconst addUploadFeature = requestHandler => (type, resource, params) => {\r\n    if (type === 'UPDATE' && resource === 'portfolios') {\r\n        // notice that following condition can be true only when `<ImageInput source=\"pictures\" />` component has parameter `multiple={true}`\r\n        // if parameter `multiple` is false, then data.pictures is not an array, but single object\r\n        if (params.data.pictures && params.data.pictures.length) {\r\n            // only freshly dropped pictures are instance of File\r\n            const formerPictures = params.data.pictures.filter(p => !(p.rawFile instanceof File));\r\n            const newPictures = params.data.pictures.filter(p => p.rawFile instanceof File);\r\n\r\n            return Promise.all(newPictures.map(convertFileToBase64))\r\n                .then(base64Pictures => base64Pictures.map((picture64, index) => ({\r\n                    src: picture64,\r\n                    title: `${newPictures[index].title}`,\r\n                })))\r\n                .then(transformedNewPictures => requestHandler(type, resource, {\r\n                    ...params,\r\n                    data: {\r\n                        ...params.data,\r\n                        pictures: [...transformedNewPictures, ...formerPictures],\r\n                    },\r\n                }));\r\n        }\r\n    }\r\n    // for other request types and resources, fall back to the default request handler\r\n    return requestHandler(type, resource, params);\r\n};\r\n\r\nexport default addUploadFeature;","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\n\r\nexport default () => (\r\n    <Card>\r\n        <CardHeader title=\"Welcome to the OPCMS Rest Docker Admin\" />\r\n        <CardContent></CardContent>\r\n    </Card>\r\n);","import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\r\nimport { loginUrl } from './settings';\r\n\r\nexport default (type, params) => {\r\n    // called when the user attempts to log in\r\n    if (type === AUTH_LOGIN) {\r\n        const { username, password } = params;\r\n        const request = new Request(loginUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ 'username': username, 'password': password }),\r\n            headers: new Headers({ 'Content-Type': 'application/json' })\r\n        });\r\n        localStorage.removeItem('logged_token');\r\n        return fetch(request)\r\n            .then(response => {\r\n                if (response.status !== 200) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((json_data) => {\r\n                if( json_data.is_logged_in ) {\r\n                    localStorage.setItem('logged_token', json_data.logged_token);\r\n                }\r\n            });\r\n    }\r\n    // called when the user clicks on the logout button\r\n    if (type === AUTH_LOGOUT) {\r\n        localStorage.removeItem('logged_token');\r\n        return Promise.resolve();\r\n    }\r\n    // called when the API returns an error\r\n    if (type === AUTH_ERROR) {\r\n        const { status } = params;\r\n        if (status === 401 || status === 403) {\r\n            localStorage.removeItem('logged_token');\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    // called when the user navigates to a new location\r\n    if (type === AUTH_CHECK) {\r\n        return ('logged_token' in localStorage)\r\n            ? Promise.resolve()\r\n            : Promise.reject();\r\n    }\r\n    return Promise.reject('Unknown method');\r\n};","\r\nexport const apiUrl = 'http://localhost:8080';\r\nexport const loginUrl = 'http://localhost:8080/users/login';","import React from 'react';\nimport { fetchUtils, Admin, Resource } from 'react-admin';\nimport { SiteList, SiteEdit } from './sites';\nimport { UserList, UserEdit, UserCreate } from './users';\nimport { PortfolioList, PortfolioEdit, PortfolioCreate } from './portfolios';\nimport { apiUrl } from './settings';\nimport simpleRestProvider from 'ra-data-simple-rest';\nimport addUploadFeature from './addUploadFeature';\n\nimport Dashboard from './Dashboard';\nimport authProvider from './authProvider';\n\nimport SiteIcon from '@material-ui/icons/Web';\nimport UserIcon from '@material-ui/icons/Group';\n\nconst httpClient = (url, options = {}) => {\n    if (!options.headers) {\n        options.headers = new Headers({ Accept: 'application/json' });\n    }\n    const logged_token = localStorage.getItem('logged_token');\n    options.headers.set('Authorization', `${logged_token}`);\n    return fetchUtils.fetchJson(url, options);\n}\nconst dataProvider = simpleRestProvider(apiUrl, httpClient);\nconst uploadCapableDataProvider = addUploadFeature(dataProvider);\n\nconst App = () => (\n    <Admin dashboard={Dashboard} authProvider={authProvider} dataProvider={uploadCapableDataProvider}>\n        <Resource name=\"sites\" list={SiteList} edit={SiteEdit} icon={SiteIcon} />\n        <Resource name=\"users\" list={UserList} edit={UserEdit} create={UserCreate} icon={UserIcon} />\n        <Resource name=\"portfolios\" list={PortfolioList} edit={PortfolioEdit} create={PortfolioCreate} />\n    </Admin>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}